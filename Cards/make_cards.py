#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import yaml
import sys

# print( _cards )
        
# print( "__CARDS" )
# for type, type_dict in _cards.items():
#     print( "T: "+type_dict["display"] + " ("+type+")")
    
#     for cplx, cplx_dict in type_dict["cards"].items():
#         print( "  C: "+ str(cplx) )
#         for letter, code in cplx_dict.items():
#             print( "    "+letter+" => "+str(code) )


# **************************************************************** card_template
def card_template( type, display_type, cplx, letter, code ):
    header = """\\begin{tikzpicture}
  \\cardbackground
"""
    print( header )
    notes_node( letter, code )
    print( "  \\path (content.north west) ++(0.5,0) node [circle, draw, line width=1mm, inner sep=2mm, fill=white](title) {{\\Huge\\textbf{"+letter+"}}};" )
    print( "   \\path (\\cardwidth,\\cardheight) ++(-0.3,-0.5) node [anchor=east] {{\\Large\\textbf{"+display_type+"}}};" )
    print( "  \\cardtype{"+cplx+"}{"+cplx+type+"}" )
    print( "\\end{tikzpicture}" )


# ******************************************************************* nodes_node
def notes_node( letter, code):
    header = """
  \\node[contentsty] (content) at (\cardwidth*0.5,\cardheight*0.5+0.5) {
    \\begin{lilypond}[staffsize=36]
      \\version "2.18.2"
      \\include "general_def.ly"

      notes = \\drummode {
        \\time 1/8
        \\numericTimeSignature
        \\override Beam.positions = #'(5 . 5)   %% left right

        %% notes"""
    footer = """
        }
        \\score {
        <<
        \\new DrumStaff \\with {
          \\remove "Clef_engraver"
          \\remove "Time_signature_engraver"
        }
        <<
        \\set DrumStaff.drumStyleTable = #(alist->hash-table md)
        \\new DrumVoice { \\voiceOne \\notes }
        >>
        >>
      }
  
    \\end{lilypond}
  };"""

    print( header )
    print( "        "+code+" \\omit Score.BarLine" )
    print( footer )

# ******************************************************************** add_color
def add_colors():
    header = """
%% ******************************************************************** Colors
"""
    print( header )
    for type, type_dict in _cards.items():
        for cplx, cplx_dict in type_dict["cards"].items():
            col_name = cplx+type
            r,g,b = cplx_dict["color"]
            print( "\\definecolor{"+col_name+"}{RGB}{"+str(r)+","+str(g)+","+str(b)+"}" )

# ********************************************************************** globals
latex_header = """
% ****************************************************************************
% Automatically generated by make_cards.py
% ****************************************************************************
% draw music cards
\\documentclass[a4paper]{article}

%% libs
\\usepackage[utf8]{inputenc}
\\usepackage[french]{babel}
% Geometry of page
\\usepackage[margin=5mm,top=5mm]{geometry}
% TIKZ
\\usepackage{tikz}
"""

tikz_header = """
%% TIKZ MUSIC CARDS
%% ***************************************************************** Constants
\\pgfmathsetmacro{\\cardwidth}{6.3}
\\pgfmathsetmacro{\\cardheight}{8.8}
\\pgfmathsetmacro{\\typeheight}{1.5}
\\pgfmathsetmacro{\\typey}{\\typeheight*0.6}

%% ********************************************************************* Style
\\tikzset{
    %   Round corners for cards
    cardcornersty/.style={
        rounded corners=0.3cm
    },
    contentsty/.style={
      draw,
      color=black,
      line width=1mm,
      inner xsep=5mm,
      inner ysep=10mm,
      minimum width=45mm
    },
}
%% ******************************************************************** Macros
\\def\\shapeCard{(0,0) rectangle (\\cardwidth,\\cardheight)}
\\def\\shapeTypeArea{(0,0) rectangle (\\cardwidth,\\typeheight)}

%% Debug by drwing lines
\\newcommand{\\carddebug}{
    \\draw [step=1,help lines] (0,0) grid (\\cardwidth,\\cardheight);
}
%% Background of card
\\newcommand{\\cardbackground}{
  \\draw[cardcornersty] \\shapeCard;
}
%% Type of card
\\newcommand{\\cardtype}[2]{
  %   The \\clip command does not allow options, therefore 
  %   we have to use a scope to set the even odd rule.
  \\begin{scope}[even odd rule]
    %   Define a clipping path. All paths outside shapeCard will
    %   be cut because the even odd rule is set.
    \\clip[cardcornersty] \\shapeCard;
    \\fill[#2] \\shapeTypeArea;
    \\node[text width=3.75cm] at (0.5*\\cardwidth,\\typey) {
      \\begin{center}
        \\color{white}\\uppercase{\\Large \\textbf{#1}}
      \\end{center}
    };
  \\end{scope}
}

"""

# ******************************************************************* make_latex
def make_latex() :
    print( latex_header )
    add_colors()
    print( tikz_header )
    
    print( "%% ********************************************************************** MAIN" )
    print( "\\begin{document}" )
    print( "\pagestyle{empty}" )
           
    count = 0
    for type, type_dict in _cards.items():
        for cplx, cplx_dict in type_dict["cards"].items():
            ##print( "  C: "+ str(cplx) )
            for letter, code in cplx_dict.items():
                ##print( "    "+letter+" => "+str(code) )
                if letter != "color":
                    card_template( type, type_dict["display"], cplx, letter, code )
                    count += 1
                if count % 3 == 0:
                    print( "  " )
                
                

    print( "\\end{document}" )
    
# ************************************************************************* MAIN
if __name__ == '__main__':

    if len(sys.argv) < 2 :
        print( "usage "+sys.argv[0]+" <filename.yaml> " )
        sys.exit()
    

    with open(sys.argv[1], 'r') as stream:
        try:
            _cards = yaml.safe_load(stream)
        except yaml.YAMLError as exc:
            print(exc)
    make_latex()
    
    
